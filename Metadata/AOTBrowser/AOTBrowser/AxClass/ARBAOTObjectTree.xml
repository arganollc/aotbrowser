<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ARBAOTObjectTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Xpp = Microsoft.Dynamics.Ax.Xpp;
using ArbelaXpp = Arbela.Dynamics.Ax.Xpp;
using Microsoft.Dynamics.AX.Metadata.MetaModel;
using CoreMetaModel = Microsoft.Dynamics.AX.Metadata.Core.MetaModel;
using System.Reflection;
using System.Linq.Enumerable;

/// <summary>
/// Updates the Object Tree with the data from the AOT Object
/// </summary>
public class ARBAOTObjectTree
{
    public static Microsoft.Dynamics.AX.Metadata.Providers.IMetadataProvider MetadataProvider;
    public static Microsoft.Dynamics.AX.Metadata.Providers.IMetadataProvider BackupMetadataProvider;
    protected FormTreeControl treeControl;
    protected ARBAOTObjectType aotObjectType;
    protected boolean extensionsInline;
    Map collectionMap = new Map(Types::String, Types::AnyType);
    Map currentMap;
    str selectedTreePath;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>typenew</Name>
				<Source><![CDATA[
    static void typenew()
    {
        ARBAOTObjectTree::updateProvider(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProvider</Name>
				<Source><![CDATA[
    static void updateProvider(boolean _useDiskProvider)
    {
        Microsoft.Dynamics.ApplicationPlatform.Environment.IApplicationEnvironment applicationEnvironment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();
        Microsoft.Dynamics.AX.Metadata.Storage.MetadataProviderFactory metadataProviderFactory = new Microsoft.Dynamics.AX.Metadata.Storage.MetadataProviderFactory();
        BackupMetadataProvider = metadataProviderFactory.CreateRuntimeProvider(new Microsoft.Dynamics.AX.Metadata.Storage.Runtime.RuntimeProviderConfiguration(applicationEnvironment.Aos.PackageDirectory, false));
        if (_useDiskProvider)
        {
            MetadataProvider = metadataProviderFactory.CreateDiskProvider(applicationEnvironment.Aos.MetadataDirectory);
        }
        else
        {
            MetadataProvider = BackupMetadataProvider;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionMap</Name>
				<Source><![CDATA[
    public Map getCollectionMap()
    {
        return collectionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTreeControl</Name>
				<Source><![CDATA[
    public FormTreeControl parmTreeControl(FormTreeControl _treeControl = treeControl)
    {
        treeControl = _treeControl;

        return treeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAOTObjectType</Name>
				<Source><![CDATA[
    public ARBAOTObjectType parmAOTObjectType(ARBAOTObjectType _aotObjectType = aotObjectType)
    {
        aotObjectType = _aotObjectType;

        return aotObjectType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtensionsInline</Name>
				<Source><![CDATA[
    public boolean parmExtensionsInline(boolean _extensionsInline = extensionsInline)
    {
        extensionsInline = _extensionsInline;

        return extensionsInline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedTreePath</Name>
				<Source><![CDATA[
    public str parmSelectedTreePath(str _selectedTreePath = selectedTreePath)
    {
        selectedTreePath = _selectedTreePath;

        return selectedTreePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAOTObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class based on the object type
    /// </summary>
    /// <param name = "_treeControl">The tree control to update</param>
    /// <param name = "_objectType">The object type</param>
    /// <returns>The new object</returns>
    public static ARBAOTObjectTree newFromAOTObject(FormTreeControl _treeControl, ARBAOTObjectType _objectType, boolean _extensionsInline)
    {
        var aotObjectTypeAttribute = new ARBAOTObjectTypeAttribute(_objectType);
        ARBAOTObjectTree aotObjectTree = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(ARBAOTObjectTree), aotObjectTypeAttribute);

        if (aotObjectTree == null)
        {
            aotObjectTree = new ARBAOTObjectTree();
        }

        aotObjectTree.parmTreeControl(_treeControl);
        aotObjectTree.parmAOTObjectType(_objectType);
        aotObjectTree.parmExtensionsInline(_extensionsInline);

        return aotObjectTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAOTObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the AOT Object
    /// </summary>
    /// <param name = "_aotNodeName">The name of the AOT Object</param>
    /// <returns>The AOT Object</returns>
    public anytype getAOTObject(TreeNodeName _aotNodeName, Microsoft.Dynamics.AX.Metadata.Providers.IMetadataProvider _metadataProvider = MetadataProvider)
    {
        anytype aotObject;
        switch (aotObjectType)
        {
            case ARBAOTObjectType::Table:
                aotObject = _metadataProvider.Tables.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::View:
                aotObject = _metadataProvider.Views.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::DataEntity:
                aotObject = _metadataProvider.DataEntityViews.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::BaseEnum:
                aotObject = _metadataProvider.Enums.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::ExtendedDataType:
                aotObject = _metadataProvider.Edts.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Class:
                aotObject = _metadataProvider.Classes.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Form:
                aotObject = _metadataProvider.Forms.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Query:
                aotObject = _metadataProvider.Queries.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Map:
                aotObject = _metadataProvider.Maps.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Tile:
                aotObject = _metadataProvider.Tiles.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Menu:
                aotObject = _metadataProvider.Menus.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::TableCollection:
                aotObject = _metadataProvider.TableCollections.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::CompositeDataEntity:
                aotObject = _metadataProvider.CompositeDataEntityViews.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::MenuItemDisplay:
                aotObject = _metadataProvider.MenuItemDisplays.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::MenuItemAction:
                aotObject = _metadataProvider.MenuItemActions.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::MenuItemOutput:
                aotObject = _metadataProvider.MenuItemOutputs.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::SecurityRole:
                aotObject = _metadataProvider.SecurityRoles.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::SecurityDuty:
                aotObject = _metadataProvider.SecurityDuties.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::SecurityPrivilege:
                aotObject = _metadataProvider.SecurityPrivileges.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::AggregateDataEntity:
                aotObject = _metadataProvider.AggregateDataEntities.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowCategory:
                aotObject = _metadataProvider.WorkflowCategories.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowApproval:
                aotObject = _metadataProvider.WorkflowApprovals.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowTask:
                aotObject = _metadataProvider.WorkflowTasks.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowAutomatedTask:
                aotObject = _metadataProvider.WorkflowAutomatedTasks.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowType:
                aotObject = _metadataProvider.WorkflowTemplates.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowHierarchyAssignmentProvider:
                aotObject = _metadataProvider.WorkflowHierarchyAssignmentProviders.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowParticipantAssignmentProvider:
                aotObject = _metadataProvider.WorkflowParticipantAssignmentProviders.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowQueueAssignmentProvider:
                aotObject = _metadataProvider.WorkflowQueueAssignmentProviders.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::WorkflowDueDateCalculationProvider:
                aotObject = _metadataProvider.WorkflowDueDateCalculationProviders.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Resource:
                aotObject = _metadataProvider.Resources.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::LicenseCode:
                aotObject = _metadataProvider.LicenseCodes.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::ConfigKey:
                aotObject = _metadataProvider.ConfigurationKeys.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::ConfigKeyGroup:
                aotObject = _metadataProvider.ConfigurationKeyGroups.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Service:
                aotObject = _metadataProvider.Services.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::ServiceGroup:
                aotObject = _metadataProvider.ServiceGroups.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::Report:
                aotObject = _metadataProvider.Reports.Read(_aotNodeName);
                break;
            case ARBAOTObjectType::KPI:
                aotObject = _metadataProvider.KPIs.Read(_aotNodeName);
                break;
        }

        if (aotObject == null
            && _metadataProvider != BackupMetadataProvider)
        {
            aotObject = this.getAOTObject(_aotNodeName, BackupMetadataProvider);
        }

        return aotObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAOTObjectExtensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the extension enumerator for the object
    /// </summary>
    /// <param name = "_aotNodeName">The name of the object</param>
    /// <returns>An enumerator of the extensions</returns>
    public System.Collections.IEnumerator getAOTObjectExtensions(TreeNodeName _aotNodeName)
    {
        System.Collections.IEnumerator enumerator;
        switch (aotObjectType)
        {
            case ARBAOTObjectType::Table:
                enumerator = Xpp.MetadataSupport::GetTableExtensionsForTable(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::View:
                enumerator = ArbelaXpp.MetadataSupport::GetViewExtensionsForView(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::DataEntity:
                enumerator = ArbelaXpp.MetadataSupport::GetDataEntityViewExtensionsForDataEntityView(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::BaseEnum:
                enumerator = ArbelaXpp.MetadataSupport::GetEnumExtensionsForEnum(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::ExtendedDataType:
                enumerator = ArbelaXpp.MetadataSupport::GetEdtExtensionsForEdt(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::Form:
                enumerator = ArbelaXpp.MetadataSupport::GetFormExtensionsForForm(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::Query:
                enumerator = ArbelaXpp.MetadataSupport::GetQueryExtensionsForQuery(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::Menu:
                enumerator = ArbelaXpp.MetadataSupport::GetMenuExtensionsForMenu(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::MenuItemDisplay:
                enumerator = ArbelaXpp.MetadataSupport::GetMenuItemDisplayExtensionsForMenuItemDisplay(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::MenuItemAction:
                enumerator = ArbelaXpp.MetadataSupport::GetMenuItemActionExtensionsForMenuItemAction(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::MenuItemOutput:
                enumerator = ArbelaXpp.MetadataSupport::GetMenuItemOutputExtensionsForMenuItemOutput(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::SecurityRole:
                enumerator = ArbelaXpp.MetadataSupport::GetSecurityRoleExtensionsForSecurityRole(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::SecurityDuty:
                enumerator = ArbelaXpp.MetadataSupport::GetSecurityDutyExtensionsForSecurityDuty(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::WorkflowApproval:
                enumerator = ArbelaXpp.MetadataSupport::GetWorkflowApprovalExtensionsForWorkflowApproval(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::WorkflowTask:
                enumerator = ArbelaXpp.MetadataSupport::GetWorkflowTaskExtensionsForWorkflowTask(_aotNodeName).GetEnumerator();
                break;
            case ARBAOTObjectType::WorkflowType:
                enumerator = ArbelaXpp.MetadataSupport::GetWorkflowTemplateExtensionsForWorkflowTemplate(_aotNodeName).GetEnumerator();
                break;
        }

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the object tree
    /// </summary>
    /// <param name = "_aotNodeName">The name of the AOT object</param>
    public void update(TreeNodeName _aotNodeName)
    {
        TreeItemIdx rootIdx = this.updateObjectTree(this.getAOTObject(_aotNodeName), _aotNodeName);
        System.Collections.IEnumerator enumerator = this.getAOTObjectExtensions(_aotNodeName);

        if (enumerator != null)
        {
            TreeItemIdx extensionsIdx;
            if (!extensionsInline)
            {
                extensionsIdx = SysFormTreeControl::addTreeItem(treeControl, ARBAOTBrowserConstants::Extensions, rootIdx, ARBAOTBrowserConstants::Extensions, 0, true);
            }
            while (enumerator.moveNext())
            {
                if (extensionsInline)
                {
                    str extensionName = conPeek(list2Con(strSplit(this.getObjectName(enumerator.Current), '.')),2);
                    System.Type t = enumerator.Current.GetType();
        
                    var props = t.GetProperties();
                    for (int i = 0; i < props.Length; i++)
                    {
                        PropertyInfo prop = props.GetValue(i);
                        var mods = prop.GetValue(enumerator.Current) as System.Collections.IEnumerable;
                        if (mods != null)
                        {
                            if (prop.Name == ARBAOTBrowserConstants::PropertyModifications)
                            {
                                FormTreeItem rootNode = treeControl.getItem(treeControl.getRoot());
                                AxExtensionModification extMod = new AxExtensionModification();
                                extMod.PropertyModifications = mods;
                                this.addExtensionModification(rootNode, extMod, extensionName);
                            }
                            else
                            {
                                this.addExtensionCollection(mods, prop.Name, extensionName);
                            }
                        }
                    }
                }
                else
                {
                    this.addTreeNode(enumerator.Current, extensionsIdx);
                }
            }
        }

        TreeItemIdx selectedIdx = rootIdx;
        if (selectedTreePath)
        {
            List pathSegments = strSplit(selectedTreePath, '/');
            ListEnumerator pathSegmentsEnum = pathSegments.getEnumerator();
            TreeItemIdx currentIdx = rootIdx;
            while (pathSegmentsEnum.moveNext())
            {
                str segmentName = pathSegmentsEnum.current();
                TreeItemIdx childIdx = treeControl.getChild(currentIdx);
                boolean found = false;
                while (childIdx != 0)
                {
                    FormTreeItem childNode = treeControl.getItem(childIdx);
                    if (childNode.text() == segmentName)
                    {
                        found = true;
                        currentIdx = childIdx;
                        break;
                    }
                    childIdx = treeControl.getNextSibling(childIdx);
                }
                if (!found)
                {
                    break;
                }
            }

            selectedIdx = currentIdx;
        }

        treeControl.select(selectedIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtensionCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of extensions to the tree
    /// </summary>
    /// <param name = "_collection">The collection to add</param>
    /// <param name = "_collectionName">The collection name</param>
    /// <param name = "_extensionName">The extension name</param>
    protected void addExtensionCollection(System.Collections.IEnumerable _collection, str _collectionName, str _extensionName)
    {
        System.Collections.IEnumerator modEnum = _collection.GetEnumerator();
        if (strEndsWith(_collectionName, ARBAOTBrowserConstants::Modifications))
        {
            str modName = strReplace(_collectionName, ARBAOTBrowserConstants::Modifications, 's');
            System.Collections.IEnumerator modsEnum = _collection.GetEnumerator();
            if (collectionMap.exists(modName))
            {
                Map valuesMap = collectionMap.lookup(modName);
                while (modsEnum.MoveNext())
                {
                    FormTreeItem control = treeControl.getItem(valuesMap.lookup(this.getObjectName(modsEnum.Current)));
                    this.addExtensionModification(control, modsEnum.Current, _extensionName);
                }
            }
        }
        else
        {
            if (collectionMap.exists(_collectionName))
            {
                Map modMap = collectionMap.lookup(_collectionName);
                TreeItemIdx rootNodeIdx = modMap.lookup(ARBAOTBrowserConstants::RootNode);
                while (modEnum.MoveNext())
                {
                    if (modEnum.Current is AxExtensionModification)
                    {
                        FormTreeItem control = treeControl.getItem(modMap.lookup(this.getObjectName(modEnum.Current)));
                        this.addExtensionModification(control, modEnum.Current, _extensionName);
                    }
                    else
                    {
                        TreeItemIdx extIdx = this.addExtension(modEnum.Current, rootNodeIdx, _extensionName);
                        modMap.insert(this.getObjectName(modEnum.Current), extIdx);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateObjectTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the object tree with the AOT object properties
    /// </summary>
    /// <param name = "_object">The AOT Object</param>
    /// <param name = "_rootNodeName">The name of the root node</param>
    /// <returns>The index of the root node</returns>
    public TreeItemIdx updateObjectTree(anytype _object, str _rootNodeName)
    {
        treeControl.deleteAll();

        TreeItemIdx rootIdx = this.addTreeNode(_object, FormTreeAdd::Root);

        SysFormTreeControl::expandTree(treeControl, rootIdx, 1);

        return rootIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new node to the tree
    /// </summary>
    /// <param name = "_object">The object to add</param>
    /// <param name = "_idx">The tree index to add it under</param>
    /// <param name = "_formTreeAdd">The order it should add the node</param>
    /// <param name = "_skipAddHeader">If true, skip adding the header node</param>
    /// <param name = "_extensionName">The name of the extension it came from, if any</param>
    /// <returns>The tree index of the new node</returns>
    public TreeItemIdx addTreeNode(anytype _object, TreeItemIdx _idx, int _formTreeAdd = FormTreeAdd::Sort, boolean _skipAddHeader = false, str _extensionName = '')
    {
        if (_object == null)
        {
            return 0;
        }

        System.Type t = _object.GetType();
        
        var props = t.GetProperties();
        str name = this.getObjectName(_object);

        TreeItemIdx parentIdx = _idx;
        if (!_skipAddHeader)
        {
            parentIdx = SysFormTreeControl::addTreeItem(treeControl, name + (_extensionName == '' ? '' : ' (' + _extensionName + ')'), _idx, _object, 0, false, 0, _formTreeAdd);
        }
        for (int i = 0; i < props.Length; i++)
        {
            
            PropertyInfo prop = props.GetValue(i);
            if (prop.PropertyType.Name != ARBAOTBrowserConstants::String
                && (prop.Name == ARBAOTBrowserConstants::ViewMetadata
                    || prop.Name == ARBAOTBrowserConstants::DataSource
                    || prop.Name == ARBAOTBrowserConstants::Design
                    || prop.Name == ARBAOTBrowserConstants::FormControl
                    || prop.PropertyType.Name == ARBAOTBrowserConstants::AxWorkflowOutcome))
            {
                var propValue = prop.GetValue(_object);
                TreeItemIdx idx = SysFormTreeControl::addTreeItem(treeControl, prop.Name, parentIdx, propValue, 0, true, 0, _formTreeAdd);
                this.addTreeNode(propValue, idx, prop.Name == ARBAOTBrowserConstants::Design ? FormTreeAdd::Last : _formTreeAdd, true);
            }
            else if (prop.PropertyType.Name == ARBAOTBrowserConstants::KeyedObjectCollection)
            {
                var col = prop.GetValue(_object) as System.Collections.IEnumerable;
                this.addCollectionToTree(col, prop.Name, parentIdx, _formTreeAdd);
            }
        }

        return parentIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getObjectName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the name for an object
    /// </summary>
    /// <param name = "_object">The object</param>
    /// <returns>The name of the object</returns>
    protected str getObjectName(anytype _object)
    {
        Microsoft.Dynamics.AX.Metadata.Core.MetaModel.INamedObject namedObject = _object as Microsoft.Dynamics.AX.Metadata.Core.MetaModel.INamedObject;
        str name;      
        if (namedObject != null)
        {
            name = namedObject.Name;
        }
        else if (_object is AxTableMappingConnection)
        {
            AxTableMappingConnection mapConn = _object as AxTableMappingConnection;
            name = strFmt('%1 == %2', mapConn.MapField, mapConn.MapFieldTo);
        }
        else
        {
            name = _object.ToString();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCollectionToTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a collection type to the tree
    /// </summary>
    /// <param name = "_collection">The Collection to add</param>
    /// <param name = "_collectionName">The name of the collection</param>
    /// <param name = "_parentIdx">The parent index to add the collection to</param>
    /// <param name = "_formTreeAdd">The method for adding the collection to the tree</param>
    /// <returns>The index of the collection</returns>
    protected TreeItemIdx addCollectionToTree(System.Collections.IEnumerable _collection, str _collectionName, TreeItemIdx _parentIdx, int _formTreeAdd)
    {
        boolean insertIntoMap = false;
        if (treeControl.getRoot() == _parentIdx)
        {
            insertIntoMap = true;
            if (collectionMap.exists(_collectionName))
            {
                currentMap = collectionMap.lookup(_collectionName);
            }
            else
            {
                currentMap = new Map(Types::String, Types::Integer);
                collectionMap.insert(_collectionName, currentMap);
            }
        }

        TreeItemIdx idx = _parentIdx;
        if ((_collectionName != ARBAOTBrowserConstants::Controls && _collectionName != ARBAOTBrowserConstants::Elements && _collectionName != ARBAOTBrowserConstants::Constraints)
            || (treeControl.getItem(_parentIdx).data() is AxFormExtension))
        {
            idx = SysFormTreeControl::addTreeItem(treeControl, _collectionName, _parentIdx, _collection, 0, true, 0, _formTreeAdd);
        }
                
        System.Collections.IEnumerator enumerator = _collection.GetEnumerator();

        while (enumerator.moveNext())
        {
            TreeItemIdx childIdx = this.addTreeNode(enumerator.Current, idx, _formTreeAdd);
            if (insertIntoMap)
            {
                currentMap.insert(this.getObjectName(enumerator.Current), childIdx);
            }
        }

        if (insertIntoMap)
        {
            currentMap.insert(ARBAOTBrowserConstants::RootNode, idx);
            currentMap = null;
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an extension to the tree
    /// </summary>
    /// <param name = "_extension">The extension</param>
    /// <param name = "_parentIdx">The parent index</param>
    /// <param name = "_extensionName">The extension name</param>
    /// <param name = "_positionType">The position the control should be added</param>
    /// <param name = "_afterItemIdx">The index where the control should be inserted after</param>
    protected TreeItemIdx addExtension(anytype _extension, TreeItemIdx _parentIdx, str _extensionName, CoreMetaModel.ExtensionItemPositionType _positionType =CoreMetaModel.ExtensionItemPositionType::End, int _afterItemIdx = 0)
    {
        FormTreeItem parentControl = treeControl.getItem(_parentIdx);
        if (parentControl.data() is System.Collections.IEnumerable
            || parentControl.data() is ARBObjectExtension)
        {
            ARBObjectExtension extension = parentControl.data() as ARBObjectExtension;
            if (extension == null)
            {
                extension = new ARBObjectExtension();
                extension.Object = parentControl.data();
                parentControl.data(extension);
                treeControl.setItem(parentControl);
            }
            List mods = extension.Extensions;
            mods.addEnd(_extension);
        }

        int formTreeAdd;
        switch (_positionType)
        {
            case CoreMetaModel.ExtensionItemPositionType::Begin:
                formTreeAdd = FormTreeAdd::First;
                break;
            case CoreMetaModel.ExtensionItemPositionType::End:
                formTreeAdd = FormTreeAdd::Last;
                break;
            case CoreMetaModel.ExtensionItemPositionType::AfterItem:
                formTreeAdd = _afterItemIdx;
                break;
        }
        TreeItemIdx extIdx = this.addTreeNode(_extension, _parentIdx, formTreeAdd, false, _extensionName);
        FormTreeItem control = treeControl.getItem(extIdx);
        control.stateBold(true);
        treeControl.setItem(control);
        return extIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtensionModification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an extension modification to the tree
    /// </summary>
    /// <param name = "_control">The tree item control</param>
    /// <param name = "_mod">The modification to make</param>
    /// <param name = "_extensionName">The extension name</param>
    protected void addExtensionModification(FormTreeItem _control, AxExtensionModification _mod, str _extensionName)
    {
        FormTreeItem parentControl = treeControl.getItem(treeControl.getParent(_control.idx()));
        if (parentControl != null
            && parentControl.data() != null
            && (parentControl.data() is System.Collections.IEnumerable
                || parentControl.data() is ARBObjectExtension))
        {
            ARBObjectExtension extension = parentControl.data() as ARBObjectExtension;
            if (extension == null)
            {
                extension = new ARBObjectExtension();
                extension.Object = parentControl.data();
                parentControl.data(extension);
                treeControl.setItem(parentControl);
            }
            Map parentMods = extension.Modifications;
            parentMods.insert(_control.text(), _mod);
        }

        ARBObjectModification modification = _control.data() as ARBObjectModification;
        if (modification == null)
        {
            modification = new ARBObjectModification();
            modification.Object = _control.data();
            _control.data(modification);
        }
        List mods = modification.Modifications;
        mods.addEnd(_mod);
        if (!strEndsWith(_control.text(), '...'))
        {
            if (strLen(_control.text()) < 60)
            {
                _control.text(_control.text() + ' (' + _extensionName + ')');
            }
            else
            {
                _control.text(_control.text() + '...');
            }
        }
        _control.stateBold(true);
        treeControl.setItem(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNamedNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the index of the node in a sibling group based on the name
    /// </summary>
    /// <param name = "_parentIdx">The parent index</param>
    /// <param name = "_nodeName">The node name</param>
    /// <returns>The index of the node</returns>
    protected TreeItemIdx getNamedNode(TreeItemIdx _parentIdx, str _nodeName)
    {
        TreeItemIdx childIdx = treeControl.getChild(_parentIdx);
        FormTreeItem ret;

        do
        {
            ret = treeControl.getItem(childIdx);
            childIdx = treeControl.getNextSibling(childIdx);
        }
        while (ret.text() != _nodeName && childIdx > 0);

        return ret.idx();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>